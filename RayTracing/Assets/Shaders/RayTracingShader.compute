// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#define MAX_DEPTH 1
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
float2 _PixelOffset;
static const float PI = 3.14159265f;
static const float EPSILON = 1e-6;

//-----------------------------------
// Utilty
float sdot(float3 x, float3 y, float f = 1.0f)
{
    return saturate(dot(x, y) * f);
}

float energy(float3 color)
{
    return dot(color, 1.0f / 3.0f);
}

//-----------------------------------
// Random
float2 _pixel;
float _seed;
float rand()
{
    float result = frac(sin(_seed / 100.0f * dot(_pixel, float2(12.9898f, 78.233f))) * 43758.5453f);
    _seed += 1.0f;
    return result;
}

//-----------------------------------
// Ray
struct Ray
{
    float3 origin;
    float3 direction;
    float3 energy;
};

Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ray.energy = float3(1.0f, 1.0f, 1.0f);
    return ray;
}

Ray CreateCameraRay(float2 uv)
{
    // Transform from screen space to world space
    float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    
    //Inverse the perspective projection
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
    
    // Transform the direction from camera space to world space
    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);
    
    return CreateRay(origin, direction);
}

//-----------------------------------
// RayHit
struct RayHit
{
    float3 position;
    float distance;
    float3 normal;
    float3 albedo;
    float3 specular;
    float smoothness;
    float3 emission;
};

RayHit Raycast()
{
    RayHit hit;
    hit.position = float3(0.0f, 0.0f, 0.0f);
    hit.distance = 1.#INF;
    hit.normal = float3(0.0f, 0.0f, 0.0f);
    hit.albedo = float3(0.0f, 0.0f, 0.0f);
    hit.specular = float3(0.0f, 0.0f, 0.0f);
    hit.smoothness = 0.0f;
    hit.emission = float3(0.0f, 0.0f, 0.0f);
    return hit;
}

//-----------------------------------
// MeshStructure
struct MeshObject
{
    float4x4 localToWorldMatrix;
    int indices_offset;
    int indices_count;
    float4 albedo;
    float4 specular;
    float smoothness;
    float4 emission;
};

StructuredBuffer<MeshObject> _MeshObjectBuffer;
StructuredBuffer<float3> _VerticesBuffer;
StructuredBuffer<int> _IndicesBuffer;

//-----------------------------------
// Intersection
bool IntersectTriangle(Ray ray, float3 vert0, float3 vert1, float3 vert2,
	inout float t, inout float u, inout float v)
{
 //   // find vectors for two edges sharing vert0
 //   float3 edge1 = vert1 - vert0;
 //   float3 edge2 = vert2 - vert0;

	//// begin calculating determinant - also used to calculate U parameter
 //   float3 pvec = cross(ray.direction, edge2);

	//// if determinant is near zero, ray lies in plane of triangle
 //   float det = dot(edge1, pvec);

	//// use backface culling
 //   if (det < EPSILON)
 //       return false;
 //   float inv_det = 1.0f / det;

	//// calculate distance from vert0 to ray origin
 //   float3 tvec = ray.origin - vert0;

	//// calculate U parameter and test bounds
 //   u = dot(tvec, pvec) * inv_det;
 //   if (u < 0.0 || u > 1.0f)
 //       return false;

	//// prepare to test V parameter
 //   float3 qvec = cross(tvec, edge1);

	//// calculate V parameter and test bounds
 //   v = dot(ray.direction, qvec) * inv_det;
 //   if (v < 0.0 || u + v > 1.0f)
 //       return false;

	//// calculate t, ray intersects triangle
 //   t = dot(edge2, qvec) * inv_det;

 //   return t > EPSILON;
    float3 edge1 = vert1 - vert0;
    float3 edge2 = vert2 - vert0;
    float3 pvec = cross(ray.direction, edge2);
    float det = dot(edge1, pvec);
    if (abs(det) < EPSILON)
        return false;
    float invDet = 1.0f / det;
    float3 tvec = ray.origin - vert0;
    u = dot(tvec, pvec) * invDet;
    if (u < 0.0f || u > 1.0f)
        return false;
    float3 qvec = cross(tvec, edge1);
    v = dot(ray.direction, qvec) * invDet;
    if (v < 0.0f || u + v > 1.0f)
        return false;
    t = dot(edge2, qvec) * invDet;
    return t > EPSILON;
}

void IntersectMeshObject(Ray ray, inout RayHit bestHit, MeshObject meshObject)
{
    uint offset = meshObject.indices_offset;
    uint count = offset + meshObject.indices_count;
    for (uint i = offset; i < count; i += 3)
    {
        float3 v0 = (mul(meshObject.localToWorldMatrix, float4(_VerticesBuffer[_IndicesBuffer[i]], 1.0f))).xyz;
        float3 v1 = (mul(meshObject.localToWorldMatrix, float4(_VerticesBuffer[_IndicesBuffer[i + 1]], 1.0f))).xyz;
        float3 v2 = (mul(meshObject.localToWorldMatrix, float4(_VerticesBuffer[_IndicesBuffer[i + 2]], 1.0f))).xyz;
        
        float t, u, v;
        if (IntersectTriangle(ray, v0, v1, v2, t, u, v))
        {
            if (t < bestHit.distance)
            {
                bestHit.distance = t;
                bestHit.position = ray.origin + t * ray.direction;
                bestHit.normal = normalize(cross(v1 - v0, v2 - v0));
                bestHit.albedo = meshObject.albedo.xyz;
                //bestHit.albedo = 1.0f;
                bestHit.specular = meshObject.specular.xyz;
                bestHit.smoothness = meshObject.smoothness;
                bestHit.emission = meshObject.emission.xyz;
                
            }
        }
    }
}

//-----------------------------------
// Sampling
float3x3 GetTangentSpace(float3 normal)
{
    // Choose a helper vector for the cross product
    float3 helper = float3(1, 0, 0);
    if (abs(normal.x) > 0.99f)
        helper = float3(0, 0, 1);

    // Generate vectors
    float3 tangent = normalize(cross(normal, helper));
    float3 binormal = normalize(cross(normal, tangent));
    return float3x3(tangent, binormal, normal);
}

float3 SampleHemisphere(float3 normal, float alpha)
{
    // Sample the hemisphere, where alpha determines the kind of the sampling
    float cosTheta = pow(rand(), 1.0f / (alpha + 1.0f));
    float sinTheta = sqrt(1.0f - cosTheta * cosTheta);
    float phi = 2 * PI * rand();
    float3 tangentSpaceDir = float3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);

    // Transform direction to world space
    return mul(tangentSpaceDir, GetTangentSpace(normal));
}

//-----------------------------------
// Trace
RayHit TraceRay(Ray ray)
{
    RayHit bestHit = Raycast();
    uint count, stride, i;
    
    // Trace mesh objects
    _MeshObjectBuffer.GetDimensions(count, stride);
    for (i = 0; i < count; i++)
    {
        IntersectMeshObject(ray, bestHit, _MeshObjectBuffer[i]);
    }

    return bestHit;
}

//-----------------------------------
// Shade
float SmoothnessToPhongAlpha(float s)
{
    return pow(1000.0f, s * s);
}

float3 Shade(inout Ray ray, RayHit hit)
{
    //if (hit.distance < 1.#INF)
    //{
    //    // Calculate chances of diffuse and specular reflection
    //    hit.albedo = min(1.0f - hit.specular, hit.albedo);
    //    float specChance = energy(hit.specular);
    //    float diffChance = energy(hit.albedo);

    //    float3 color = hit.emission;
    //    // Roulette-select the ray's path
    //    float roulette = rand();
    //    if (roulette < specChance)
    //    {
    //        // Specular reflection
    //        ray.origin = hit.position + hit.normal * 0.001f;
    //        float alpha = SmoothnessToPhongAlpha(hit.smoothness);
    //        ray.direction = SampleHemisphere(reflect(ray.direction, hit.normal), alpha);
    //        float f = (alpha + 2) / (alpha + 1);
    //        ray.energy *= (1.0f / specChance) * hit.specular * sdot(hit.normal, ray.direction, f);
    //    }
    //    else if (diffChance > 0 && roulette < specChance + diffChance)
    //    {
    //        // Diffuse reflection
    //        ray.origin = hit.position + hit.normal * 0.001f;
    //        ray.direction = SampleHemisphere(hit.normal, 1.0f);
    //        ray.energy *= (1.0f / diffChance) * hit.albedo;
    //    }
    //    else
    //    {
    //        // Terminate ray
    //        ray.energy = 0.0f;
    //    }

    //    return color;
    //}
    //else
    //{
    //    return float3(0.0f, 0.0f, 0.0f);
    //}
    //if (hit.distance < 1.#INF)
    //{
    //    return hit.normal * 0.5f + 0.5f;
    //}
    //else
    //{
    //    return float3(0.0f, 0.0f, 0.0f);
    //}

    if (hit.distance < 1.#INF)
    {
        return -hit.normal * 0.5 + 0.5;
    }
    else
    {
        return float3(0.0f, 0.0f, 0.0f);
    }
    //return hit.albedo;
}

//-----------------------------------
// kernel
[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    _pixel = float2(id.xy);
    // Get the dimensions of the render texture
    uint width, height;
    Result.GetDimensions(width, height);
    
    // Transform pixel to UV coordinates
    float2 uv = float2((id.xy + _PixelOffset) / float2(width, height) * 2.0f - 1.0f);
    
    // Create a ray from the camera for the UVs
    Ray ray = CreateCameraRay(uv);
    
    // Trace and shade
    //RayHit hit = TraceRay(ray);
    //Result[id.xy] = float4(Shade(ray, hit), 1.0f);
    float3 result = float3(0.0f, 0.0f, 0.0f);
    for (int i = 0; i < MAX_DEPTH; i++)
    {
        RayHit hit = TraceRay(ray);
        result += Shade(ray, hit);
        
        if (!any(ray.energy))
        {
            break;
        }
    }
    Result[id.xy] = float4(result, 1.0f);
}