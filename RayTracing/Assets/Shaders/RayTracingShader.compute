// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

struct Ray
{
    float3 origin;
    float3 direction;
};

Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    return ray;
}

Ray CreateCameraRay(float2 uv)
{
    // Transform from screen space to world space
    float3 origin = mul(_CameraToWorld, float4(0, 0, 0, 1)).xyz;
    
    //Inverse the perspective projection
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
    
    // Transform the direction from camera space to world space
    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);
    
    return CreateRay(origin, direction);
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{    
    // Get the dimensions of the render texture
    uint width, height;
    Result.GetDimensions(width, height);
    
    // Transform pixel to UV coordinates
    float2 uv = float2((id.xy + float2(0.5f, 0.5f)) / float2(width, height) * 2.0f - 1.0f);
    
    // Create a ray from the camera for the UVs
    Ray ray = CreateCameraRay(uv);
    
    // Write color to the render texture
    Result[id.xy] = float4(ray.direction * 0.5f + 0.5f, 1.0f);
}
