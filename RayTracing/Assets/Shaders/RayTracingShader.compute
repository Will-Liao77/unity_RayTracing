// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#define MAX_DEPTH 1
#define NUM_PER_PIXEL 1
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
float2 _PixelOffset;

// light data
float3 _PointLightPos;
float4 _PointLightProperties;

// texture
int _TextureCount;
int _MaxTextureHeight;
int _MaxTextureWidth;

// name should be the same as the Texture2DArray in the shader
SamplerState sampler__Texture2DArray;
Texture2DArray _Texture2DArray;

static const float PI = 3.14159265f;
static const float EPSILON = 1e-8;

//-----------------------------------
// Utilty
float sdot(float3 x, float3 y, float f = 1.0f)
{
    return saturate(dot(x, y) * f);
}

float energy(float3 color)
{
    return dot(color, 1.0f / 3.0f);
}

//-----------------------------------
// Random
float2 _pixel;
float _seed;
float rand()
{
    float result = frac(sin(_seed / 100.0f * dot(_pixel, float2(12.9898f, 78.233f))) * 43758.5453f);
    _seed += 1.0f;
    return result;
}

//-----------------------------------
// Ray
struct Ray
{
    float3 origin;
    float3 direction;
};

Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = normalize(direction);
    return ray;
}

Ray CreateCameraRay(float2 uv)
{
    // Transform from screen space to world space
    float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    
    //Inverse the perspective projection
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
    
    // Transform the direction from camera space to world space
    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);
    
    return CreateRay(origin, direction);
}

//-----------------------------------
// RayHit
struct RayHit
{
    float3 position;
    float distance;
    float3 normal;
    float3 albedo;
    float3 specular;
    float smoothness;
    float3 emission;
};

RayHit Raycast()
{
    RayHit hit;
    hit.position = float3(0.0f, 0.0f, 0.0f);
    hit.distance = 1.#INF;
    hit.normal = float3(0.0f, 0.0f, 0.0f);
    hit.albedo = float3(0.0f, 0.0f, 0.0f);
    hit.specular = float3(0.0f, 0.0f, 0.0f);
    hit.smoothness = 0.0f;
    hit.emission = float3(0.0f, 0.0f, 0.0f);
    return hit;
}

//-----------------------------------
// MeshStructure
struct MeshObject
{
    float4x4 localToWorldMatrix;
    int indices_offset;
    int indices_count;
    float4 albedo;
    float4 specular;
    float smoothness;
    float4 emission;
    int textureIndex;
    float4 textureST;
};

StructuredBuffer<MeshObject> _MeshObjectBuffer;
StructuredBuffer<float3> _VerticesBuffer;
StructuredBuffer<int> _IndicesBuffer;
StructuredBuffer<float2> _TexCoordsBuffer;

float3 SampleAlbedo(MeshObject meshObject, float2 uv)
{
    if (meshObject.textureIndex >= 0 && meshObject.textureIndex < _TextureCount)
    {
        //float2 scaledUV = uv * meshObject.textureST.xy + meshObject.textureST.zw;
        return meshObject.albedo.rgb * _Texture2DArray.SampleLevel(sampler__Texture2DArray, float3(uv, meshObject.textureIndex), 0).rgb;
    }else
    {
        return meshObject.albedo.rgb;    
    }
}

//-----------------------------------
// Intersection
// calculate the intersection pf a ray with a triangle using the Moller-Trumbore algorithm
bool IntersectTriangle(Ray ray, float3 vert0, float3 vert1, float3 vert2,
	inout float t, inout float u, inout float v)
{
    // find vectors for two edges sharing vert0
    float3 edge1 = vert1 - vert0;
    float3 edge2 = vert2 - vert0;
    
    // begin calculating determinant - also used to calculate U parameter
    float3 pvec = cross(ray.direction, edge2);
    
    // if determinant is near zero, ray lies in plane of triangle
    float det = dot(edge1, pvec);
    if (abs(det) < EPSILON)
        return false;
    float invDet = 1.0f / det;
    
    // calculate distance from vert0 to ray origin
    float3 tvec = ray.origin - vert0;
    
    // calculate U parameter and test bounds
    u = dot(tvec, pvec) * invDet;
    if (u < 0.0f || u > 1.0f)
        return false;
    
    // prepare to test V parameter
    float3 qvec = cross(tvec, edge1);
    
    // calculate V parameter and test bounds
    v = dot(ray.direction, qvec) * invDet;
    if (v < 0.0f || u + v > 1.0f)
        return false;
        
    // calculate t, ray intersects triangle
    t = dot(edge2, qvec) * invDet;
    
    return t > EPSILON;
}

// intersect all triangles of a mesh objects with a ray(slow)
void IntersectMeshObject(Ray ray, inout RayHit bestHit, MeshObject meshObject)
{
    uint offset = meshObject.indices_offset;
    uint count = offset + meshObject.indices_count;
    for (uint i = offset; i < count; i += 3)
    {
        float3 v0 = (mul(meshObject.localToWorldMatrix, float4(_VerticesBuffer[_IndicesBuffer[i]], 1.0f))).xyz;
        float3 v1 = (mul(meshObject.localToWorldMatrix, float4(_VerticesBuffer[_IndicesBuffer[i + 1]], 1.0f))).xyz;
        float3 v2 = (mul(meshObject.localToWorldMatrix, float4(_VerticesBuffer[_IndicesBuffer[i + 2]], 1.0f))).xyz;
        
        float t, u, v;
        if (IntersectTriangle(ray, v0, v1, v2, t, u, v))
        {
            if (t < bestHit.distance)
            {
                bestHit.distance = t;
                bestHit.position = ray.origin + t * ray.direction;
                bestHit.normal = normalize(cross(v1 - v0, v2 - v0));
                //bestHit.normal = normalize(w * v0 + u * v1 + v * v2);
                float2 uv = u * float2(0, 0) + u * float2(1, 0) + v * float2(0, 1);

                //float2 uv0 = _TexCoordsBuffer[_IndicesBuffer[i]].xy;
                //float2 uv1 = _TexCoordsBuffer[_IndicesBuffer[i + 1]].xy;
                //float2 uv2 = _TexCoordsBuffer[_IndicesBuffer[i + 2]].xy;
                //float2 uv = uv0 + u * (uv1 - uv0) + v * (uv2 - uv0);
                
                bestHit.albedo = SampleAlbedo(meshObject, uv);
                //bestHit.albedo = float3(uv, 0.0f);
                //bestHit.albedo = meshObject.albedo.xyz;
                bestHit.specular = meshObject.specular.xyz;
                bestHit.smoothness = meshObject.smoothness;
                bestHit.emission = meshObject.emission.xyz;
                
            }
        }
    }
}

//-----------------------------------
// Sampling
float3 RandomDirectin()
{
    float z = rand() * 2.0f - 1.0f;
    float a = rand() * 2.0f * PI;
    float r= sqrt(1.0f - z * z);
    float x = r * cos(a);
    float y = r * sin(a);
    return float3(x, y, z);
}

//-----------------------------------
// Trace
RayHit TraceRay(Ray ray)
{
    RayHit bestHit = Raycast();
    uint count, stride, i;
    
    // Trace mesh objects
    _MeshObjectBuffer.GetDimensions(count, stride);
    for (i = 0; i < count; i++)
    {
        IntersectMeshObject(ray, bestHit, _MeshObjectBuffer[i]);
    }

    return bestHit;
}

//-----------------------------------
// Shade
float3 Shade(inout Ray ray, RayHit hit)
{
    // Calculate the lighting
    if (hit.distance < 1.#INF)
    {
        float3 lightDir = normalize(_PointLightPos.xyz - hit.position);
        float3 lightDistance = length(_PointLightPos.xyz - hit.position);
        float3 normal = -(hit.normal * 0.5) + 0.5;
        
        // diffuse
        float diffuse = max(dot(normal, lightDir), 0.0f);
        float3 diffuseColor = hit.albedo * diffuse;
        
        float attenuation = 1.0 / (1.0 + 0.09 * lightDistance + 0.032 * (lightDistance * lightDistance));

        float3 ambient = 0.1f * hit.albedo;
        
        float3 lightColor = (_PointLightProperties.x * _PointLightProperties.w) + (_PointLightProperties.y * _PointLightProperties.w) + (_PointLightProperties.z * _PointLightProperties.w);
        
        float3 color = ambient * (diffuseColor) * lightColor * attenuation + hit.emission;
        
        //float3 color = hit.albedo;

        return color;
    }
    else
    {
        return float3(0.0f, 0.0f, 0.0f);
    }
    
    //if (hit.distance < 1.#INF)
    //{
    //    // add - cause the normal is in the wrong direction
    //    return -hit.normal * 0.5 + 0.5;
    //}
    //else
    //{
    //    return float3(0.0f, 0.0f, 0.0f);
    //}
}

//-----------------------------------
// kernel
[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    _pixel = float2(id.xy);
    // Get the dimensions of the render texture
    uint width, height;
    Result.GetDimensions(width, height);
    
    float3 result = float3(0.0f, 0.0f, 0.0f);
    
    // Transform pixel to UV coordinates
    float2 uv = float2((id.xy + _PixelOffset) / float2(width, height) * 2.0f - 1.0f);
    
    // Create a ray from the camera for the UVs
    //Ray ray = CreateCameraRay(uv);
    
    float3 rayColor = float3(1.0f, 1.0f, 1.0f);
    float3 incomingLight = float3(0.0f, 0.0f, 0.0f);
    
    for (int i = 0; i < NUM_PER_PIXEL; i++)
    {
        Ray ray = CreateCameraRay(uv);

        float3 throughput = float3(1, 1, 1);
        
        for (int depth = 0; depth < MAX_DEPTH; depth++)
        {
            RayHit hit = TraceRay(ray);
            float3 color = Shade(ray, hit);
            
            result += throughput * color;
            
            throughput *= hit.albedo;
            
            float p = max(throughput.x, max(throughput.y, throughput.z));
            if (rand() > p)
            {
                break;
            }
            
            throughput *= 1.0f / p;
        }
    }
    
    result /= NUM_PER_PIXEL;
    
    result = result / (result + float3(1.0f, 1.0f, 1.0f));
    
    Result[id.xy] = float4(result, 1.0f);
    
    // Trace and shade
    //RayHit hit = TraceRay(ray);
    //Result[id.xy] = float4(Shade(ray, hit), 1.0f);
    //float3 result = float3(0.0f, 0.0f, 0.0f);
    //for (int i = 0; i < MAX_DEPTH; i++)
    //{
    //    RayHit hit = TraceRay(ray);
    //    result += ray.energy * Shade(ray, hit);
        
    //    if (!any(ray.energy))
    //    {
    //        break;
    //    }
    //}
    //Result[id.xy] = float4(result, 1.0f);
}