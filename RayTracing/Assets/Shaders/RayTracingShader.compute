// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

//-----------------------------------
// Ray
struct Ray
{
    float3 origin;
    float3 direction;
};

Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    return ray;
}

Ray CreateCameraRay(float2 uv)
{
    // Transform from screen space to world space
    float3 origin = mul(_CameraToWorld, float4(0, 0, 0, 1)).xyz;
    
    //Inverse the perspective projection
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
    
    // Transform the direction from camera space to world space
    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);
    
    return CreateRay(origin, direction);
}

//-----------------------------------
// RayHit
struct RayHit
{
    float3 position;
    float distance;
    float3 normal;
};

RayHit Raycast()
{
    RayHit hit;
    hit.position = float3(0.0f, 0.0f, 0.0f);
    hit.distance = 1.#INF;
    hit.normal = float3(0.0f, 0.0f, 0.0f);
    return hit;
}

//-----------------------------------
// Intersection
void IntersectGroundPlane(Ray ray, inout RayHit hit)
{
    float t = -ray.origin.y / ray.direction.y;
    if (t > 0.0f && t < hit.distance)
    {
        hit.distance = t;
        hit.position = ray.origin + t * ray.direction;
        hit.normal = float3(0.0f, 1.0f, 0.0f);
    }
}

RayHit Trace(Ray ray)
{
    RayHit hit = Raycast();
    //IntersectGroundPlane(ray, hit);
    return hit;
}

float3 Shade(inout Ray ray, RayHit hit)
{
    if (hit.distance < 1.#INF)
    {
        return hit.normal * 0.5f + 0.5f;
    }
    else
    {
        return float3(0.0f, 0.0f, 0.0f);
    }
}

//-----------------------------------
// kernel
[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{    
    // Get the dimensions of the render texture
    uint width, height;
    Result.GetDimensions(width, height);
    
    // Transform pixel to UV coordinates
    float2 uv = float2((id.xy + float2(0.5f, 0.5f)) / float2(width, height) * 2.0f - 1.0f);
    
    // Create a ray from the camera for the UVs
    Ray ray = CreateCameraRay(uv);
    
    // Write color to the render texture
    //Result[id.xy] = float4(ray.direction * 0.5f + 0.5f, 1.0f);
    
    // Trace and shade
    RayHit hit = Trace(ray);
    Result[id.xy] = float4(Shade(ray, hit), 1.0f);
}
